"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _apidomAst = require("@swagger-api/apidom-ast");
var _CstVisitor = _interopRequireWildcard(require("./visitors/CstVisitor.cjs"));
var _YamlAstVisitor = _interopRequireWildcard(require("./visitors/YamlAstVisitor.cjs"));
var _TreeCursorIterator = _interopRequireDefault(require("../TreeCursorIterator.cjs"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * This version of syntactic analysis does following transformations:
 *   TreeSitter CST -> YAML AST -> ApiDOM
 * Two traversals passes are needed to get from CST to ApiDOM.
 */
const analyze = (cst, {
  sourceMap = false
} = {}) => {
  const cursor = cst.walk();
  const iterator = new _TreeCursorIterator.default(cursor);
  const rootNode = [...iterator].at(0);
  const cstVisitor = (0, _CstVisitor.default)();
  const astVisitor = (0, _YamlAstVisitor.default)();
  const schema = (0, _apidomAst.YamlJsonSchema)();
  const yamlAst = (0, _apidomAst.visit)(rootNode, cstVisitor, {
    // @ts-ignore
    keyMap: _CstVisitor.keyMap,
    nodePredicate: _CstVisitor.isNode,
    state: {
      schema,
      sourceMap
    }
  });
  return (0, _apidomAst.visit)(yamlAst.rootNode, astVisitor, {
    // @ts-ignore
    keyMap: _YamlAstVisitor.keyMap,
    nodeTypeGetter: _YamlAstVisitor.getNodeType,
    nodePredicate: _YamlAstVisitor.isNode,
    state: {
      sourceMap
    }
  });
};
var _default = analyze;
exports.default = _default;