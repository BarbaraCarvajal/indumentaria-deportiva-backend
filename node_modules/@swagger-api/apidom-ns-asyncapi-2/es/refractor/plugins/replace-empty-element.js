import { defaultTo } from 'ramda';
import { MemberElement, ObjectElement, ArrayElement, isStringElement, includesClasses, isArrayElement } from '@swagger-api/apidom-core';
import mediaTypes from "../../media-types.js";
/**
 * AsyncApi >= 2.0.0 <=2.6.0 specification elements.
 */
import AsyncApiVersionElement from "../../elements/AsyncApiVersion.js";
import IdentifierElement from "../../elements/Identifier.js";
import InfoElement from "../../elements/Info.js";
import ServersElement from "../../elements/Servers.js";
import DefaultContentTypeElement from "../../elements/DefaultContentType.js";
import ChannelsElement from "../../elements/Channels.js";
import ComponentsElement from "../../elements/Components.js";
import TagsElement from "../../elements/Tags.js";
import ExternalDocumentationElement from "../../elements/ExternalDocumentation.js";
import ContactElement from "../../elements/Contact.js";
import LicenseElement from "../../elements/License.js";
import ServerElement from "../../elements/Server.js";
import ServerVariableElement from "../../elements/ServerVariable.js";
import ChannelItemElement from "../../elements/ChannelItem.js";
import SchemaElement from "../../elements/Schema.js";
import MessageElement from "../../elements/Message.js";
import SecuritySchemeElement from "../../elements/SecurityScheme.js";
import ParameterElement from "../../elements/Parameter.js";
import CorrelationIDElement from "../../elements/CorrelationID.js";
import OperationTraitElement from "../../elements/OperationTrait.js";
import MessageTraitElement from "../../elements/MessageTrait.js";
import ServerBindingsElement from "../../elements/ServerBindings.js";
import ChannelBindingsElement from "../../elements/ChannelBindings.js";
import OperationBindingsElement from "../../elements/OperationBindings.js";
import MessageBindingsElement from "../../elements/MessageBindings.js";
import OAuthFlowsElement from "../../elements/OAuthFlows.js";
import OAuthFlowElement from "../../elements/OAuthFlow.js";
import OperationElement from "../../elements/Operation.js";
import SecurityRequirementElement from "../../elements/SecurityRequirement.js";
import TagElement from "../../elements/Tag.js";
import MessageExampleElement from "../../elements/MessageExample.js";
/**
 * Binding elements.
 */
// AMQP 0-9-1
import AmqpChannelBindingElement from "../../elements/bindings/amqp/AmqpChannelBinding.js";
import AmqpMessageBindingElement from "../../elements/bindings/amqp/AmqpMessageBinding.js";
import AmqpOperationBindingElement from "../../elements/bindings/amqp/AmqpOperationBinding.js";
import AmqpServerBindingElement from "../../elements/bindings/amqp/AmqpServerBinding.js"; // AMQP 1.0
import Amqp1ChannelBindingElement from "../../elements/bindings/amqp1/Amqp1ChannelBinding.js";
import Amqp1MessageBindingElement from "../../elements/bindings/amqp1/Amqp1MessageBinding.js";
import Amqp1OperationBindingElement from "../../elements/bindings/amqp1/Amqp1OperationBinding.js";
import Amqp1ServerBindingElement from "../../elements/bindings/amqp1/Amqp1ServerBinding.js"; // Anypoint MQ
import AnypointmqChannelBindingElement from "../../elements/bindings/anypointmq/AnypointmqChannelBinding.js";
import AnypointmqMessageBindingElement from "../../elements/bindings/anypointmq/AnypointmqMessageBinding.js";
import AnypointmqOperationBindingElement from "../../elements/bindings/anypointmq/AnypointmqOperationBinding.js";
import AnypointmqServerBindingElement from "../../elements/bindings/anypointmq/AnypointmqServerBinding.js"; // Google Cloud Pub/Sub
import GooglepubsubChannelBindingElement from "../../elements/bindings/googlepubsub/GooglepubsubChannelBinding.js";
import GooglepubsubMessageBindingElement from "../../elements/bindings/googlepubsub/GooglepubsubMessageBinding.js";
import GooglepubsubOperationBindingElement from "../../elements/bindings/googlepubsub/GooglepubsubOperationBinding.js";
import GooglepubsubServerBindingElement from "../../elements/bindings/googlepubsub/GooglepubsubServerBinding.js"; // HTTP
import HttpChannelBindingElement from "../../elements/bindings/http/HttpChannelBinding.js";
import HttpMessageBindingElement from "../../elements/bindings/http/HttpMessageBinding.js";
import HttpOperationBindingElement from "../../elements/bindings/http/HttpOperationBinding.js";
import HttpServerBindingElement from "../../elements/bindings/http/HttpServerBinding.js"; // IBM MQ
import IbmmqChannelBindingElement from "../../elements/bindings/ibmmq/IbmmqChannelBinding.js";
import IbmmqMessageBindingElement from "../../elements/bindings/ibmmq/IbmmqMessageBinding.js";
import IbmmqOperationBindingElement from "../../elements/bindings/ibmmq/IbmmqOperationBinding.js";
import IbmmqServerBindingElement from "../../elements/bindings/ibmmq/IbmmqServerBinding.js"; // JMS
import JmsChannelBindingElement from "../../elements/bindings/jms/JmsChannelBinding.js";
import JmsMessageBindingElement from "../../elements/bindings/jms/JmsMessageBinding.js";
import JmsOperationBindingElement from "../../elements/bindings/jms/JmsOperationBinding.js";
import JmsServerBindingElement from "../../elements/bindings/jms/JmsServerBinding.js"; // Kafka
import KafkaChannelBindingElement from "../../elements/bindings/kafka/KafkaChannelBinding.js";
import KafkaMessageBindingElement from "../../elements/bindings/kafka/KafkaMessageBinding.js";
import KafkaOperationBindingElement from "../../elements/bindings/kafka/KafkaOperationBinding.js";
import KafkaServerBindingElement from "../../elements/bindings/kafka/KafkaServerBinding.js"; // Mercure
import MercureChannelBindingElement from "../../elements/bindings/mercure/MercureChannelBinding.js";
import MercureMessageBindingElement from "../../elements/bindings/mercure/MercureMessageBinding.js";
import MercureOperationBindingElement from "../../elements/bindings/mercure/MercureOperationBinding.js";
import MercureServerBindingElement from "../../elements/bindings/mercure/MercureServerBinding.js"; // MQTT
import MqttChannelBindingElement from "../../elements/bindings/mqtt/MqttChannelBinding.js";
import MqttMessageBindingElement from "../../elements/bindings/mqtt/MqttMessageBinding.js";
import MqttOperationBindingElement from "../../elements/bindings/mqtt/MqttOperationBinding.js";
import MqttServerBindingElement from "../../elements/bindings/mqtt/MqttServerBinding.js"; // MQTT 5
import Mqtt5ChannelBindingElement from "../../elements/bindings/mqtt5/Mqtt5ChannelBinding.js";
import Mqtt5MessageBindingElement from "../../elements/bindings/mqtt5/Mqtt5MessageBinding.js";
import Mqtt5OperationBindingElement from "../../elements/bindings/mqtt5/Mqtt5OperationBinding.js";
import Mqtt5ServerBindingElement from "../../elements/bindings/mqtt5/Mqtt5ServerBinding.js"; // NATS
import NatsChannelBindingElement from "../../elements/bindings/nats/NatsChannelBinding.js";
import NatsMessageBindingElement from "../../elements/bindings/nats/NatsMessageBinding.js";
import NatsOperationBindingElement from "../../elements/bindings/nats/NatsOperationBinding.js";
import NatsServerBindingElement from "../../elements/bindings/nats/NatsServerBinding.js"; // Pulsar
import PulsarChannelBindingElement from "../../elements/bindings/pulsar/PulsarChannelBinding.js";
import PulsarMessageBindingElement from "../../elements/bindings/pulsar/PulsarMessageBinding.js";
import PulsarOperationBindingElement from "../../elements/bindings/pulsar/PulsarOperationBinding.js";
import PulsarServerBindingElement from "../../elements/bindings/pulsar/PulsarServerBinding.js"; // Redis
import RedisChannelBindingElement from "../../elements/bindings/redis/RedisChannelBinding.js";
import RedisMessageBindingElement from "../../elements/bindings/redis/RedisMessageBinding.js";
import RedisOperationBindingElement from "../../elements/bindings/redis/RedisOperationBinding.js";
import RedisServerBindingElement from "../../elements/bindings/redis/RedisServerBinding.js"; // SNS
import SnsChannelBindingElement from "../../elements/bindings/sns/SnsChannelBinding.js";
import SnsMessageBindingElement from "../../elements/bindings/sns/SnsMessageBinding.js";
import SnsOperationBindingElement from "../../elements/bindings/sns/SnsOperationBinding.js";
import SnsServerBindingElement from "../../elements/bindings/sns/SnsServerBinding.js"; // Solace
import SolaceChannelBindingElement from "../../elements/bindings/solace/SolaceChannelBinding.js";
import SolaceMessageBindingElement from "../../elements/bindings/solace/SolaceMessageBinding.js";
import SolaceOperationBindingElement from "../../elements/bindings/solace/SolaceOperationBinding.js";
import SolaceServerBindingElement from "../../elements/bindings/solace/SolaceServerBinding.js"; // SQS
import SqsChannelBindingElement from "../../elements/bindings/sqs/SqsChannelBinding.js";
import SqsMessageBindingElement from "../../elements/bindings/sqs/SqsMessageBinding.js";
import SqsOperationBindingElement from "../../elements/bindings/sqs/SqsOperationBinding.js";
import SqsServerBindingElement from "../../elements/bindings/sqs/SqsServerBinding.js"; // STOMP
import StompChannelBindingElement from "../../elements/bindings/stomp/StompChannelBinding.js";
import StompMessageBindingElement from "../../elements/bindings/stomp/StompMessageBinding.js";
import StompOperationBindingElement from "../../elements/bindings/stomp/StompOperationBinding.js";
import StompServerBindingElement from "../../elements/bindings/stomp/StompServerBinding.js"; // WebSocket
import WebSocketChannelBindingElement from "../../elements/bindings/ws/WebSocketChannelBinding.js";
import WebSocketMessageBindingElement from "../../elements/bindings/ws/WebSocketMessageBinding.js";
import WebSocketOperationBindingElement from "../../elements/bindings/ws/WebSocketOperationBinding.js";
import WebSocketServerBindingElement from "../../elements/bindings/ws/WebSocketServerBinding.js"; // non-concrete Elements (NCEs)
import ComponentsSchemasElement from "../../elements/nces/ComponentsSchemas.js";
import ComponentsServersElement from "../../elements/nces/ComponentsServers.js";
import ComponentsServerVariablesElement from "../../elements/nces/ComponentsServerVariables.js";
import ComponentsMessagesElement from "../../elements/nces/ComponentsMessages.js";
import ComponentsSecuritySchemesElement from "../../elements/nces/ComponentsSecuritySchemes.js";
import ComponentsParametersElement from "../../elements/nces/ComponentsParameters.js";
import ComponentsCorrelationIDsElement from "../../elements/nces/ComponentsCorrelationIDs.js";
import ComponentsOperationTraitsElement from "../../elements/nces/ComponentsOperationTraits.js";
import ComponentsMessageTraitsElement from "../../elements/nces/ComponentsMessageTraits.js";
import ComponentsServerBindingsElement from "../../elements/nces/ComponentsServerBindings.js";
import ComponentsChannelBindingsElement from "../../elements/nces/ComponentsChannelBindings.js";
import ComponentsOperationBindingsElement from "../../elements/nces/ComponentsOperationBindings.js";
import ComponentsMessageBindingsElement from "../../elements/nces/ComponentsMessageBindings.js";
import ServerVariablesElement from "../../elements/nces/ServerVariables.js";
import ChannelItemServersElement from "../../elements/nces/ChannelItemsServers.js";
import OAuthFlowScopesElement from "../../elements/nces/OAuthFlowScopes.js";
import OperationTraitsElement from "../../elements/nces/OperationTraits.js";
import ServerSecurityElement from "../../elements/nces/ServerSecurity.js";
import OperationMessageMapElement from "../../elements/nces/OperationMessageMap.js";
import OperationMessageElement from "../../elements/nces/OperationMessage.js";
import OperationSecurityElement from "../../elements/nces/OperationSecurity.js";
import OperationTraitSecurityElement from "../../elements/nces/OperationTraitSecurity.js";
import MessageExamplesElement from "../../elements/nces/MessageExamples.js";
import MessageTraitsElement from "../../elements/nces/MessageTraits.js";
import MessageTraitExamplesElement from "../../elements/nces/MessageTraitExamples.js";
import { getNodeType } from "../../traversal/visitor.js";
/**
 * This plugin is specific to YAML 1.2 format, which allows defining key-value pairs
 * with empty key, empty value, or both. If the value is not provided in YAML format,
 * this plugin compensates for this missing value with the most appropriate semantic element type.
 *
 * https://yaml.org/spec/1.2.2/#72-empty-nodes
 *
 * @example
 *
 * ```yaml
 * asyncapi: 2.6.0
 * info:
 * ```
 * Refracting result without this plugin:
 *
 *  (AsyncApi2Element
 *    (MemberElement
 *      (StringElement)
 *      (AsyncApiVersionElement))
 *    (MemberElement
 *      (StringElement)
 *      (StringElement))
 *
 * Refracting result with this plugin:
 *
 *  (AsyncApi2Element
 *    (MemberElement
 *      (StringElement)
 *      (AsyncApiVersionElement))
 *    (MemberElement
 *      (StringElement)
 *      (InfoElement))
 */
const isEmptyElement = element => isStringElement(element) && includesClasses(['yaml-e-node', 'yaml-e-scalar'], element);
const schema = {
  // concrete types handling (CTs)
  AsyncApi2Element: {
    asyncapi(...args) {
      return new AsyncApiVersionElement(...args);
    },
    identifier(...args) {
      return new IdentifierElement(...args);
    },
    info(...args) {
      return new InfoElement(...args);
    },
    servers(...args) {
      return new ServersElement(...args);
    },
    defaultContentType(...args) {
      return new DefaultContentTypeElement(...args);
    },
    channels(...args) {
      return new ChannelsElement(...args);
    },
    components(...args) {
      return new ComponentsElement(...args);
    },
    tags(...args) {
      return new TagsElement(...args);
    },
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    }
  },
  InfoElement: {
    contact(...args) {
      return new ContactElement(...args);
    },
    license(...args) {
      return new LicenseElement(...args);
    }
  },
  ServersElement: {
    '[key: *]': function key(...args) {
      return new ServerElement(...args);
    }
  },
  ServerElement: {
    variables(...args) {
      return new ServerVariablesElement(...args);
    },
    security(...args) {
      return new ServerSecurityElement(...args);
    },
    tags(...args) {
      return new TagsElement(...args);
    },
    bindings(...args) {
      return new ServerBindingsElement(...args);
    }
  },
  ServerVariableElement: {
    enum(...args) {
      return new ArrayElement(...args);
    },
    examples(...args) {
      return new ArrayElement(...args);
    }
  },
  SecurityRequirementElement: {
    '[key: *]': function key(...args) {
      return new ArrayElement(...args);
    }
  },
  ChannelsElement: {
    '[key: *]': function key(...args) {
      return new ChannelItemElement(...args);
    }
  },
  ChannelItemElement: {
    servers(...args) {
      return new ChannelItemServersElement(...args);
    },
    subscribe(...args) {
      return new OperationElement(...args);
    },
    publish(...args) {
      return new OperationElement(...args);
    },
    parameters(...args) {
      return new ParameterElement(...args);
    },
    bindings(...args) {
      return new ChannelBindingsElement(...args);
    }
  },
  OperationElement: {
    tags(...args) {
      return new TagsElement(...args);
    },
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    },
    bindings(...args) {
      return new OperationBindingsElement(...args);
    },
    traits(...args) {
      return new OperationTraitsElement(...args);
    },
    message(...args) {
      return new MessageElement(...args);
    }
  },
  ComponentsElement: {
    schemas(...args) {
      return new ComponentsSchemasElement(...args);
    },
    servers(...args) {
      return new ComponentsServersElement(...args);
    },
    serverVariables(...args) {
      return new ComponentsServerVariablesElement(...args);
    },
    messages(...args) {
      return new ComponentsMessagesElement(...args);
    },
    securitySchemes(...args) {
      return new ComponentsSecuritySchemesElement(...args);
    },
    parameters(...args) {
      return new ComponentsParametersElement(...args);
    },
    correlationIds(...args) {
      return new ComponentsCorrelationIDsElement(...args);
    },
    operationTraits(...args) {
      return new ComponentsOperationTraitsElement(...args);
    },
    messageTraits(...args) {
      return new ComponentsMessageTraitsElement(...args);
    },
    serverBindings(...args) {
      return new ComponentsServerBindingsElement(...args);
    },
    channelBindings(...args) {
      return new ComponentsChannelBindingsElement(...args);
    },
    operationBindings(...args) {
      return new ComponentsOperationBindingsElement(...args);
    },
    messageBindings(...args) {
      return new ComponentsMessageBindingsElement(...args);
    }
  },
  TagElement: {
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    }
  },
  MessageElement: {
    headers(...args) {
      return new SchemaElement(...args);
    },
    correlationId(...args) {
      return new CorrelationIDElement(...args);
    },
    tags(...args) {
      return new TagsElement(...args);
    },
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    },
    bindings(...args) {
      return new MessageBindingsElement(...args);
    },
    examples(...args) {
      return new ArrayElement(...args);
    },
    traits(...args) {
      return new ArrayElement(...args);
    },
    payload(...args) {
      var _messageElement$schem;
      // @ts-ignore
      const {
        context: messageElement
      } = this;
      const schemaFormat = defaultTo(mediaTypes.latest(), (_messageElement$schem = messageElement.schemaFormat) === null || _messageElement$schem === void 0 ? void 0 : _messageElement$schem.toValue());
      if (mediaTypes.includes(schemaFormat)) {
        return new SchemaElement(...args);
      }
      return new ObjectElement(...args);
    }
  },
  SecuritySchemeElement: {
    flows(...args) {
      return new OAuthFlowsElement(...args);
    }
  },
  OAuthFlowsElement: {
    implicit(...args) {
      return new OAuthFlowElement(...args);
    },
    password(...args) {
      return new OAuthFlowElement(...args);
    },
    clientCredentials(...args) {
      return new OAuthFlowElement(...args);
    },
    authorizationCode(...args) {
      return new OAuthFlowElement(...args);
    }
  },
  OAuthFlow: {
    scopes(...args) {
      return new OAuthFlowScopesElement(...args);
    }
  },
  ParametersElement: {
    '[key: *]': function key(...args) {
      return new ParameterElement(...args);
    }
  },
  ParameterElement: {
    schema(...args) {
      return new SchemaElement(...args);
    }
  },
  OperationTraitElement: {
    tags(...args) {
      return new TagsElement(...args);
    },
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    },
    bindings(...args) {
      return new OperationBindingsElement(...args);
    }
  },
  MessageTraitElement: {
    headers(...args) {
      return new SchemaElement(...args);
    },
    correlationId(...args) {
      return new CorrelationIDElement(...args);
    },
    tags(...args) {
      return new TagsElement(...args);
    },
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    },
    bindings(...args) {
      return new MessageBindingsElement(...args);
    },
    examples(...args) {
      return new ArrayElement(...args);
    }
  },
  MessageExampleElement: {
    headers(...args) {
      return new ObjectElement(...args);
    }
  },
  OperationBindingsElement: {
    http(...args) {
      return new HttpOperationBindingElement(...args);
    },
    ws(...args) {
      return new WebSocketOperationBindingElement(...args);
    },
    kafka(...args) {
      return new KafkaOperationBindingElement(...args);
    },
    anypointmq(...args) {
      return new AnypointmqOperationBindingElement(...args);
    },
    amqp(...args) {
      return new AmqpOperationBindingElement(...args);
    },
    amqp1(...args) {
      return new Amqp1OperationBindingElement(...args);
    },
    mqtt(...args) {
      return new MqttOperationBindingElement(...args);
    },
    mqtt5(...args) {
      return new Mqtt5OperationBindingElement(...args);
    },
    nats(...args) {
      return new NatsOperationBindingElement(...args);
    },
    jms(...args) {
      return new JmsOperationBindingElement(...args);
    },
    sns(...args) {
      return new SnsOperationBindingElement(...args);
    },
    solace(...args) {
      return new SolaceOperationBindingElement(...args);
    },
    sqs(...args) {
      return new SqsOperationBindingElement(...args);
    },
    stomp(...args) {
      return new StompOperationBindingElement(...args);
    },
    redis(...args) {
      return new RedisOperationBindingElement(...args);
    },
    mercure(...args) {
      return new MercureOperationBindingElement(...args);
    },
    googlepubsub(...args) {
      return new GooglepubsubOperationBindingElement(...args);
    },
    ibmmq(...args) {
      return new IbmmqOperationBindingElement(...args);
    },
    pulsar(...args) {
      return new PulsarOperationBindingElement(...args);
    }
  },
  MessageBindingsElement: {
    http(...args) {
      return new HttpMessageBindingElement(...args);
    },
    ws(...args) {
      return new WebSocketMessageBindingElement(...args);
    },
    kafka(...args) {
      return new KafkaMessageBindingElement(...args);
    },
    anypointmq(...args) {
      return new AnypointmqMessageBindingElement(...args);
    },
    amqp(...args) {
      return new AmqpMessageBindingElement(...args);
    },
    amqp1(...args) {
      return new Amqp1MessageBindingElement(...args);
    },
    mqtt(...args) {
      return new MqttMessageBindingElement(...args);
    },
    mqtt5(...args) {
      return new Mqtt5MessageBindingElement(...args);
    },
    nats(...args) {
      return new NatsMessageBindingElement(...args);
    },
    jms(...args) {
      return new JmsMessageBindingElement(...args);
    },
    sns(...args) {
      return new SnsMessageBindingElement(...args);
    },
    solace(...args) {
      return new SolaceMessageBindingElement(...args);
    },
    sqs(...args) {
      return new SqsMessageBindingElement(...args);
    },
    stomp(...args) {
      return new StompMessageBindingElement(...args);
    },
    redis(...args) {
      return new RedisMessageBindingElement(...args);
    },
    mercure(...args) {
      return new MercureMessageBindingElement(...args);
    },
    ibmmq(...args) {
      return new IbmmqMessageBindingElement(...args);
    },
    googlepubsub(...args) {
      return new GooglepubsubMessageBindingElement(...args);
    },
    pulsar(...args) {
      return new PulsarMessageBindingElement(...args);
    }
  },
  ServerBindingsElement: {
    http(...args) {
      return new HttpServerBindingElement(...args);
    },
    ws(...args) {
      return new WebSocketServerBindingElement(...args);
    },
    kafka(...args) {
      return new KafkaServerBindingElement(...args);
    },
    anypointmq(...args) {
      return new AnypointmqServerBindingElement(...args);
    },
    amqp(...args) {
      return new AmqpServerBindingElement(...args);
    },
    amqp1(...args) {
      return new Amqp1ServerBindingElement(...args);
    },
    mqtt(...args) {
      return new MqttServerBindingElement(...args);
    },
    mqtt5(...args) {
      return new Mqtt5ServerBindingElement(...args);
    },
    nats(...args) {
      return new NatsServerBindingElement(...args);
    },
    jms(...args) {
      return new JmsServerBindingElement(...args);
    },
    sns(...args) {
      return new SnsServerBindingElement(...args);
    },
    solace(...args) {
      return new SolaceServerBindingElement(...args);
    },
    sqs(...args) {
      return new SqsServerBindingElement(...args);
    },
    stomp(...args) {
      return new StompServerBindingElement(...args);
    },
    redis(...args) {
      return new RedisServerBindingElement(...args);
    },
    mercure(...args) {
      return new MercureServerBindingElement(...args);
    },
    ibmmq(...args) {
      return new IbmmqServerBindingElement(...args);
    },
    googlepubsub(...args) {
      return new GooglepubsubServerBindingElement(...args);
    },
    pulsar(...args) {
      return new PulsarServerBindingElement(...args);
    }
  },
  ChannelBindingsElement: {
    http(...args) {
      return new HttpChannelBindingElement(...args);
    },
    ws(...args) {
      return new WebSocketChannelBindingElement(...args);
    },
    kafka(...args) {
      return new KafkaChannelBindingElement(...args);
    },
    anypointmq(...args) {
      return new AnypointmqChannelBindingElement(...args);
    },
    amqp(...args) {
      return new AmqpChannelBindingElement(...args);
    },
    amqp1(...args) {
      return new Amqp1ChannelBindingElement(...args);
    },
    mqtt(...args) {
      return new MqttChannelBindingElement(...args);
    },
    mqtt5(...args) {
      return new Mqtt5ChannelBindingElement(...args);
    },
    nats(...args) {
      return new NatsChannelBindingElement(...args);
    },
    jms(...args) {
      return new JmsChannelBindingElement(...args);
    },
    sns(...args) {
      return new SnsChannelBindingElement(...args);
    },
    solace(...args) {
      return new SolaceChannelBindingElement(...args);
    },
    sqs(...args) {
      return new SqsChannelBindingElement(...args);
    },
    stomp(...args) {
      return new StompChannelBindingElement(...args);
    },
    redis(...args) {
      return new RedisChannelBindingElement(...args);
    },
    mercure(...args) {
      return new MercureChannelBindingElement(...args);
    },
    ibmmq(...args) {
      return new IbmmqChannelBindingElement(...args);
    },
    googlepubsub(...args) {
      return new GooglepubsubChannelBindingElement(...args);
    },
    pulsar(...args) {
      return new PulsarChannelBindingElement(...args);
    }
  },
  SchemaElement: {
    allOf(...args) {
      const element = new ArrayElement(...args);
      element.classes.push('json-schema-allOf');
      return element;
    },
    anyOf(...args) {
      const element = new ArrayElement(...args);
      element.classes.push('json-schema-anyOf');
      return element;
    },
    oneOf(...args) {
      const element = new ArrayElement(...args);
      element.classes.push('json-schema-oneOf');
      return element;
    },
    not(...args) {
      return new SchemaElement(...args);
    },
    if(...args) {
      return new SchemaElement(...args);
    },
    then(...args) {
      return new SchemaElement(...args);
    },
    else(...args) {
      return new SchemaElement(...args);
    },
    enum(...args) {
      return new ArrayElement(...args);
    },
    items(...args) {
      return new SchemaElement(...args);
    },
    additionalItems(...args) {
      return new SchemaElement(...args);
    },
    contains(...args) {
      return new SchemaElement(...args);
    },
    required(...args) {
      const element = new ArrayElement(...args);
      element.classes.push('json-schema-required');
      return element;
    },
    properties(...args) {
      const element = new ObjectElement(...args);
      element.classes.push('json-schema-properties');
      return element;
    },
    patternProperties(...args) {
      const element = new ObjectElement(...args);
      element.classes.push('json-schema-patternProperties');
      return element;
    },
    additionalProperties(...args) {
      return new SchemaElement(...args);
    },
    dependencies(...args) {
      const element = new ObjectElement(...args);
      element.classes.push('json-schema-dependencies');
      return element;
    },
    propertyNames(...args) {
      return new SchemaElement(...args);
    },
    examples(...args) {
      const element = new ArrayElement(...args);
      element.classes.push('json-schema-examples');
      return element;
    },
    definitions(...args) {
      const element = new ObjectElement(...args);
      element.classes.push('json-schema-definitions');
      return element;
    },
    externalDocs(...args) {
      return new ExternalDocumentationElement(...args);
    }
  },
  HttpOperationBindingElement: {
    query(...args) {
      return new SchemaElement(...args);
    }
  },
  HttpMessageBindingElement: {
    headers(...args) {
      return new SchemaElement(...args);
    }
  },
  WebSocketChannelBindingElement: {
    query(...args) {
      return new SchemaElement(...args);
    },
    headers(...args) {
      return new SchemaElement(...args);
    }
  },
  KafkaOperationBindingElement: {
    groupId(...args) {
      return new SchemaElement(...args);
    },
    clientId(...args) {
      return new SchemaElement(...args);
    }
  },
  KafkaMessageBindingElement: {
    key(...args) {
      return new SchemaElement(...args);
    }
  },
  AnypointmqMessageBindingElement: {
    headers(...args) {
      return new SchemaElement(...args);
    }
  },
  AmqpChannelBindingElement: {
    exchange(...args) {
      return new ObjectElement(...args);
    },
    queue(...args) {
      return new ObjectElement(...args);
    }
  },
  AmqpOperationBindingElement: {
    cc(...args) {
      return new ArrayElement(...args);
    },
    bcc(...args) {
      return new ArrayElement(...args);
    }
  },
  IbmmqChannelBindingElement: {
    queue(...args) {
      return new ObjectElement(...args);
    },
    topic(...args) {
      return new ObjectElement(...args);
    }
  },
  MqttServerBindingElement: {
    lastWill(...args) {
      return new ObjectElement(...args);
    }
  },
  SolaceOperationBindingElement: {
    destinations(...args) {
      return new ArrayElement(...args);
    }
  },
  GooglepubsubChannelBindingElement: {
    labels(...args) {
      return new ObjectElement(...args);
    },
    messageStoragePolicy(...args) {
      return new ObjectElement(...args);
    },
    schemaSettings(...args) {
      return new ObjectElement(...args);
    }
  },
  GooglepubsubMessageBindingElement: {
    attributes(...args) {
      return new ObjectElement(...args);
    },
    schema(...args) {
      return new ObjectElement(...args);
    }
  },
  PulsarChannelBindingElement: {
    'geo-replication': function (...args) {
      return new ArrayElement(...args);
    },
    retention(...args) {
      return new ObjectElement(...args);
    }
  },
  TagsElement: {
    '<*>': function asterisk(...args) {
      return new TagElement(...args);
    }
  },
  // non-concrete types handling (NCEs)
  [ComponentsSchemasElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new SchemaElement(...args);
    }
  },
  [ComponentsServersElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new ServerElement(...args);
    }
  },
  [ComponentsServerVariablesElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new ServerVariableElement(...args);
    }
  },
  [ComponentsMessagesElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new MessageElement(...args);
    }
  },
  [ComponentsSecuritySchemesElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new SecuritySchemeElement(...args);
    }
  },
  [ComponentsParametersElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new ParameterElement(...args);
    }
  },
  [ComponentsCorrelationIDsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new CorrelationIDElement(...args);
    }
  },
  [ComponentsOperationTraitsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new OperationTraitElement(...args);
    }
  },
  [ComponentsMessageTraitsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new MessageTraitElement(...args);
    }
  },
  [ComponentsServerBindingsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new ServerBindingsElement(...args);
    }
  },
  [ComponentsChannelBindingsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new ChannelBindingsElement(...args);
    }
  },
  [ComponentsOperationBindingsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new OperationBindingsElement(...args);
    }
  },
  [ComponentsMessageBindingsElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new MessageBindingsElement(...args);
    }
  },
  [ServerVariablesElement.primaryClass]: {
    '[key: *]': function key(...args) {
      return new ServerVariableElement(...args);
    }
  },
  'json-schema-properties': {
    '[key: *]': function key(...args) {
      return new SchemaElement(...args);
    }
  },
  [ServerSecurityElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new SecurityRequirementElement(...args);
    }
  },
  [OperationTraitsElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new OperationTraitElement(...args);
    }
  },
  [OperationMessageMapElement.primaryClass]: {
    oneOf(...args) {
      return new OperationMessageElement(...args);
    }
  },
  [OperationMessageElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new MessageElement(...args);
    }
  },
  [OperationSecurityElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new SecurityRequirementElement(...args);
    }
  },
  [OperationTraitSecurityElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new SecurityRequirementElement(...args);
    }
  },
  [MessageExamplesElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new MessageExampleElement(...args);
    }
  },
  [MessageTraitsElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new MessageTraitElement(...args);
    }
  },
  [MessageTraitExamplesElement.primaryClass]: {
    '<*>': function asterisk(...args) {
      return new MessageExampleElement(...args);
    }
  },
  'json-schema-allOf': {
    '<*>': function asterisk(...args) {
      return new SchemaElement(...args);
    }
  },
  'json-schema-anyOf': {
    '<*>': function asterisk(...args) {
      return new SchemaElement(...args);
    }
  },
  'json-schema-oneOf': {
    '<*>': function asterisk(...args) {
      return new SchemaElement(...args);
    }
  }
};
const findElementFactory = (ancestor, keyName) => {
  var _ancestor$classes$fir, _ancestor$classes$fir2;
  const elementType = getNodeType(ancestor); // @ts-ignore
  const keyMapping = schema[elementType] || schema[(_ancestor$classes$fir = ancestor.classes.first) === null || _ancestor$classes$fir === void 0 || (_ancestor$classes$fir2 = _ancestor$classes$fir.toValue) === null || _ancestor$classes$fir2 === void 0 ? void 0 : _ancestor$classes$fir2.call(_ancestor$classes$fir)];
  return typeof keyMapping === 'undefined' ? undefined : Object.prototype.hasOwnProperty.call(keyMapping, '[key: *]') ? keyMapping['[key: *]'] : keyMapping[keyName];
};
const plugin = () => () => {
  return {
    visitor: {
      MemberElement(element, ...rest) {
        // no empty Element, continue with next one
        if (!isEmptyElement(element.value)) return undefined;
        const [,,, ancestors] = rest;
        const ancestor = ancestors[ancestors.length - 1]; // @ts-ignore
        const elementFactory = findElementFactory(ancestor, element.key.toValue());

        // no element factory found
        if (typeof elementFactory === 'undefined') return undefined;
        const originalValue = element.value;
        return new MemberElement(element.key, elementFactory.call({
          context: ancestor
        }, undefined, originalValue.meta.clone(), originalValue.attributes.clone()), element.meta.clone(), element.attributes.clone());
      },
      StringElement(element, ...rest) {
        if (!isEmptyElement(element)) return undefined;
        const [,,, ancestors] = rest;
        const ancestor = ancestors[ancestors.length - 1];

        // we're only interested in empty elements in ArrayElements
        if (!isArrayElement(ancestor)) return undefined;
        const elementFactory = findElementFactory(ancestor, '<*>');

        // no element factory found
        if (typeof elementFactory === 'undefined') return undefined;
        return elementFactory.call({
          context: element
        }, undefined, element.meta.clone(), element.attributes.clone());
      }
    }
  };
};
export default plugin;