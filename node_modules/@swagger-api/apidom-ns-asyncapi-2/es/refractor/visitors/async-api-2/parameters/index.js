import stampit from 'stampit';
import { test } from 'ramda';
import PatternedFieldsVisitor from "../../generics/PatternedFieldsVisitor.js";
import FallbackVisitor from "../../FallbackVisitor.js";
import ParametersElement from "../../../../elements/Parameters.js";
import { isReferenceLikeElement, isParameterLikeElement } from "../../../predicates.js";
import { isReferenceElement } from "../../../../predicates.js";
const ParametersVisitor = stampit(PatternedFieldsVisitor, FallbackVisitor, {
  props: {
    fieldPatternPredicate: test(/^[A-Za-z0-9_-]+$/),
    specPath: element => {
      // eslint-disable-next-line no-nested-ternary
      return isReferenceLikeElement(element) ? ['document', 'objects', 'Reference'] : isParameterLikeElement(element) ? ['document', 'objects', 'Parameter'] : ['value'];
    },
    canSupportSpecificationExtensions: false
  },
  init() {
    this.element = new ParametersElement();
  },
  methods: {
    ObjectElement(objectElement) {
      // @ts-ignore
      const result = PatternedFieldsVisitor.compose.methods.ObjectElement.call(this, objectElement);
      this.element.filter(isReferenceElement).forEach(referenceElement => {
        referenceElement.setMetaProperty('referenced-element', 'parameter');
      });
      return result;
    }
  }
});
export default ParametersVisitor;